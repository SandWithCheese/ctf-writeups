

# This file was *autogenerated* from the file flag.sage
from sage.all_cmdline import *   # import sage library

_sage_const_57931 = Integer(57931); _sage_const_1 = Integer(1); _sage_const_65537 = Integer(65537); _sage_const_0 = Integer(0); _sage_const_2 = Integer(2); _sage_const_128 = Integer(128); _sage_const_16 = Integer(16)
from pwn import *
from Crypto.Util.number import long_to_bytes
from itertools import combinations

host, port = "saturn.picoctf.net", _sage_const_57931 

conn = remote(host, str(port))

c = int(conn.recvline().strip().split(b"=")[-_sage_const_1 ])
d = int(conn.recvline().strip().split(b"=")[-_sage_const_1 ])
e = _sage_const_65537 

kphi = d * e - _sage_const_1 
factors = list(factor(kphi))
kphi_factor = []
for f in factors:
    for _ in range(f[_sage_const_1 ]):
        kphi_factor.append(f[_sage_const_0 ])

for i in range(_sage_const_2 , len(kphi_factor)):
    for combination in combinations(kphi_factor, i):
        p = product(combination) + _sage_const_1 
        if p.bit_length() == _sage_const_128  and is_prime(p):
            kq = kphi // (p - _sage_const_1 )
            q_factors = list(factor(kq))
            q_factor = []
            for f in q_factors:
                for _ in range(f[_sage_const_1 ]):
                    q_factor.append(f[_sage_const_0 ])

            for j in range(_sage_const_2 , len(q_factor)):
                for combination in combinations(q_factor, j):
                    q = product(combination) + _sage_const_1 
                    if q.bit_length() == _sage_const_128  and is_prime(q):
                        n = p * q
                        flag = long_to_bytes(pow(c, d, n))
                        if len(flag) == _sage_const_16 :
                            print(flag)
                            break
                        break
                else:
                    continue
                break
    else:
        continue

conn.recvuntil(b"vainglory?")
conn.sendline(flag)

conn.interactive()

