# data = [
#     {
#         "n": 12426348204210593270343924563278821305386892683425418957350363905840484905896816630189546938112358425679727243103082954824537007026886458498690134225705484501535835385800730412220192564706251228021192115494699150390312107794005569764411063907390563937247515046052549753641884721864426154021041082461015103337120756347692245843318676049947569653604616584167536958803278688355036036887022591104659059883622072052793378468850702811804337808760402077376453702190206077039468600466511349923882037572540505571672225260106649075841827340894515208811788428239691505001675042096850318994923571686175381862745049100863883977473,
#         "e": 3,
#         "c": 5065488652323342174251548936130018278628515304559137485528400780060697119682927936946069625772269234638180036633146283242714689277793018059046463458498115311853401434289264038408827377579534270489217094049453933816452196508276029690068611901872786195723358744119490651499187556193711866091991489262948739533990000464588752544599393,
#     },
# ]


from sympy.ntheory.modular import crt
from itertools import combinations
from sympy import integer_nthroot
from Crypto.Util.number import long_to_bytes

with open("encrypted-messages.txt", "r") as f:
    datas = list(filter(lambda data: data != "\n", f.readlines()))
    grouped_datas = []
    for i in range(0, len(datas), 3):
        n = int(datas[i].strip()[3:])
        e = int(datas[i + 1].strip()[3:])
        c = int(datas[i + 2].strip()[3:])
        grouped_datas.append([n, e, c])

    # print(grouped_datas)
    # print(datas)

e = 3
for datas in list(combinations(grouped_datas, 3)):
    n = [datas[0][0], datas[1][0], datas[2][0]]
    c = [datas[0][2], datas[1][2], datas[2][2]]

    x = crt(n, c)[0]

    root, isRoot = integer_nthroot(x, e)
    if isRoot:
        flag = long_to_bytes(root).decode()
        if "picoCTF" in flag:
            print(flag)
            break
