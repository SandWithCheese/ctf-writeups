const io = require("socket.io-client")
const { v4: uuidv4 } = require("uuid")

// Server connection setup
const serverUrl = "http://103.127.138.252:23130/"
const socket = io(serverUrl, {
  transports: ["websocket", "polling"], // Match server's allowed transports
  reconnection: true, // Enable reconnection
  reconnectionDelay: 1000, // Delay between attempts
  reconnectionDelayMax: 5000, // Maximum delay between reconnections
  path: "/socket.io/", // Ensure correct socket path
})

let score = 0
const uuid = uuidv4()
const name = "Player_" + Math.floor(Math.random() * 1000)

// Store the UUID and name locally
console.log("Generated UUID:", uuid)
console.log("Player Name:", name)

// Initialize the connection
socket.on("connect", () => {
  console.log("Connected to the server.")
  socket.emit("init", { uuid, name, score: 0 })
  console.log("Initialization event sent:", { uuid, name, score: 0 })
})

// Update the score periodically
const updateInterval = setInterval(() => {
  if (score >= 5750) {
    clearInterval(updateInterval)
    console.log("Reached 5000 points, requesting the flag...")
    socket.emit("flag")
  } else {
    const increment = 50
    score += increment
    console.log(`Sending score update: +${increment} (Total Score: ${score})`)
    socket.emit("update", { name, score: increment })
  }
}, 200) // Update every second

// Handle the "flag" event
socket.on("flag", (flag) => {
  console.log("Flag received:", flag)
  socket.disconnect()
})

// Handle the "score" event
socket.on("score", (serverScore) => {
  console.log("Updated score received from server:", serverScore)
})

// Handle disconnect
socket.on("disconnect", () => {
  console.log("Disconnected from the server.")
})

// Handle connection errors
socket.on("connect_error", (error) => {
  console.error("Connection error:", error.message)
})
