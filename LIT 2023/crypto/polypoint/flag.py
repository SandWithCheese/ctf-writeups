# import numpy as np

eqs = [
    (
        222738709477,
        316551778779405646458024537762733801628425406461784850075599026498565053741337014147035678112471767302308313353838044031384848988200756445707893827080502933079092477245748936205615933,
    ),
    (
        664206699157,
        316551778779405646458024537762733801628425406461784865888104427550077373548635944879652146674701538655158942462878858974744248309318363468921449484127695581959767202569054993652750413,
    ),
    (
        466816971715,
        316551778779405646458024537762733801628425406461784850540303274228943505333219096607064771157569751164935212810740341383248296484763121216876204976922546302648442276863425162951302531,
    ),
    (
        607781685226,
        316551778779405646458024537762733801628425406461784856583382479099611040995482582095486729568867989002474408931170294156825431149788517895709696274929020833693332497499840363986925099,
    ),
    (
        461897022854,
        316551778779405646458024537762733801628425406461784850493556595331266454714391588455928605071712770811139310679403293828814206705942751367641724970531838791010168761153135360884888535,
    ),
    (
        202327489838,
        316551778779405646458024537762733801628425406461784850075423398238878408230054253297735101192329059219854114270219684709044279114983523359477376014765414249172332168704365910277580351,
    ),
    (
        725444534262,
        316551778779405646458024537762733801628425406461784888271334595529696194192935525696332159935854379702373400181836567569198038350522944722135426814323563038237838302091934606155414343,
    ),
    (
        141109996562,
        316551778779405646458024537762733801628425406461784850075317586071223857237881593915942449100069207516884338864872222789437630103529153819546593153502414706533022296987673577977490643,
    ),
    (
        804730347399,
        316551778779405646458024537762733801628425406461784957840821679977943920236001416214794146567946679239226799972519639121487616962138348188601823466436334038618719972219587477332148495,
    ),
    (
        816183152786,
        316551778779405646458024537762733801628425406461784974198308680985846108087143358779128530920963540979977208391612900806473785228320819563422998987542015274186487481705512333905741139,
    ),
]

coeffs_eqs = []
y = []
for eq in eqs:
    coeffs = []
    for i in range(11):
        coeffs.append(pow(eq[0], i))
    coeffs_eqs.append(coeffs)
    y.append(eq[1])

# print(coeffs_eqs[0])
# print(y[0])

# print(coeffs_eqs[-1])
# print(y[-1])

new_coeffs_eqs = []
new_y = []
for i in range(len(coeffs_eqs) - 1):
    eq1 = coeffs_eqs[i]
    eq2 = coeffs_eqs[i + 1]

    new_eq = []
    for j in range(len(eq1)):
        if eq1[j] - eq2[j] != 0:
            new_eq.append(eq1[j] - eq2[j])

    y1 = y[i]
    y2 = y[i + 1]
    new_coeffs_eqs.append(new_eq)
    new_y.append(y1 - y2)

eq1 = coeffs_eqs[0]
eq2 = coeffs_eqs[-1]
y1 = y[0]
y2 = y[-1]

new_eq = []
for i in range(len(eq1)):
    if eq1[i] - eq2[i] != 0:
        new_eq.append(eq1[i] - eq2[i])

new_coeffs_eqs.append(new_eq)
new_y.append(y1 - y2)

# print(new_coeffs_eqs[-1])
# print(new_y[-1])

# # print(len(new_coeffs_eqs))
# # print(len(new_y))
# # for i in new_coeffs_eqs:
# #     print(len(i))

# print(new_coeffs_eqs)
# print(new_y)

# count = 0
# for i in range(10):
#     for j in range(10):
#         print(new_coeffs_eqs[i][j], end=" ")
#     print(new_y[i])
# count += 1
# print(count)

import random


x10 = random.randint(pow(10, 11), pow(10, 12))

var = (
    6943437351837141572037275457096945944172586333269246035367961451982395635660472810770271700954258449364938268843775349
    - 7338351986183466471017612487569897389439239093585246343034739644743172008941712320551900950864697407833728
    * x10,
    -82369122435523217065251180066856614789206026654675648531189360900250547588450462349013960956039338907980765
    + 87053944983745047800348384578787884790930976996063981359503184162574309515965996652522148871792
    * x10,
    550092671864584345905517706194215870536290214678441955059142459254257617672372742230511889852318
    - 581379718230533983226518224822896931376630397213664601945914993313512335358482441088
    * x10,
    -2298736844819852728069910396611817003504047751176103960514215779889172537128967477730
    + 2429479699479622014828428466210525932384631246287800653142569752677655444 * x10,
    6308575924325579494647809980109985197835903380672812383091936620980008186
    - 6667382208325806975928901460120856156485906138394675078196616 * x10,
    -11566847929506438292484083572296026944967404831371804352342400
    + 12224723458463572158774964925913230838305314692117 * x10,
    14049353246005958273530343154506087048021876371134
    - 14848423637053814474421173115011219292 * x10,
    -10858831549873745973833812861550890354 + 11476437970678003168752326 * x10,
    4838066929533873869306090 - 5113236609276 * x10,
    x10,
)

# while not all(e > 0 for e in var):
#     x10 = random.randint(pow(10, 11), pow(10, 12))

#     var = (
#         6943437351837141572037275457096945944172586333269246035367961451982395635660472810770271700954258449364938268843775349
#         - 7338351986183466471017612487569897389439239093585246343034739644743172008941712320551900950864697407833728
#         * x10,
#         -82369122435523217065251180066856614789206026654675648531189360900250547588450462349013960956039338907980765
#         + 87053944983745047800348384578787884790930976996063981359503184162574309515965996652522148871792
#         * x10,
#         550092671864584345905517706194215870536290214678441955059142459254257617672372742230511889852318
#         - 581379718230533983226518224822896931376630397213664601945914993313512335358482441088
#         * x10,
#         -2298736844819852728069910396611817003504047751176103960514215779889172537128967477730
#         + 2429479699479622014828428466210525932384631246287800653142569752677655444
#         * x10,
#         6308575924325579494647809980109985197835903380672812383091936620980008186
#         - 6667382208325806975928901460120856156485906138394675078196616 * x10,
#         -11566847929506438292484083572296026944967404831371804352342400
#         + 12224723458463572158774964925913230838305314692117 * x10,
#         14049353246005958273530343154506087048021876371134
#         - 14848423637053814474421173115011219292 * x10,
#         -10858831549873745973833812861550890354 + 11476437970678003168752326 * x10,
#         4838066929533873869306090 - 5113236609276 * x10,
#         x10,
#     )

# print(len(var))

# x = new_coeffs_eqs[0]
# y = new_y[0]
# test = 0
# for i in range(len(x)):
#     test += x[i] + var[i]

# print(test - y)


from Crypto.Util.number import long_to_bytes

# # take = new_coeffs_eqs[0]
# # test = 0
# # for i in range(len(take)):
# #     print(var[i])
# # temp = take[i] * var[i]
# # test += temp

# # print(test)
# # print(new_y[0])

for i in range(len(coeffs_eqs)):
    take = coeffs_eqs[i]
    constant = 0
    for j in range(1, len(take)):
        constant += take[j] * var[j - 1]

    # print(constant)
    flag = y[i] - constant
    print(long_to_bytes(flag))
    break

# x1 = eqs[0][0]
# y1 = eqs[0][1]
# test_y = flag
# for i in range(1, 11):
#     test_y += pow(x1, i)

# print(test_y - y1)

# x1 = eqs[1][0]
# y1 = eqs[1][1]
# test_y = flag
# for i in range(1, 11):
#     test_y += pow(x1, i)

# print(test_y - y1)


# # take = coeffs_eqs[1]
# # constant = 0
# # for i in range(1, len(take)):
# #     constant += take[i] * var[i - 1]

# # flag = y[0] - constant
# # print(long_to_bytes(flag))

# # A = np.array(new_coeffs_eqs)
# # b = np.array(new_y)
# # x = np.linalg.solve(A, b)

# # print(x)

# # print(len(A))
# # for i in range(len(A)):
# #     print(len(A[i]))
# # # print((A[9]))
# # print(len(b))
