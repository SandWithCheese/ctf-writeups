#!/usr/bin/env sage
from Crypto.Util.number import long_to_bytes as l2b

# Given values
n = 19684246059628708772480983317383455814213726437623624614774510187530858855237069298418400153500453354173244767817668087834751687010679700339329824153330321252108382193693397957995072321239719190012564060309854542158564731140984689236721699239569813711332981180252790499216183737193782894853583679474629958476424836375704908272478627857339960610436570441035665141295151053665758313689559848833310561575128979161402386371210118165090087910694077101453676371092773024726262995966286872624878747185065068855773269650358164187672521028101551603745752845605653531901885501817040020302246247289165101233562813494229465182359
C1 = 5541994085263982084018063086066919256310088843781988262848620721939199508593197895169420920818632962203271506958367100737634756166962004844045422625335637391716060416526167457686719530705972467572153014502272041274353349283789525064300988406340493239966505364227054346096952120173031970244602735144643596144272455492786387358401232721320112012758678387125183834876387764486967877838659958508743687859064918007869493945027851593103133798138091928541063653020346811027661242057877903600473040893801535868005233198983724174807772926550887758183736195585857895362915907760347851248025094794799525576001896925805863143927
C2 = 5193246663365023905374529138732792392029443443037883221817264359580147543159875212227262953347261268871009970474598406549116004695234480980772024433651164908044477050698626153521895935838213120516937166261969008077311351338830166949893509482332924412489884505649715293141079189938054495016973822000309208613485990363894433855625594110857694868663599431621919949356845367097035899111958736846075155699279920380173033288584019839938092632376903845697826077791590821013079823821853401771838583629459521414299743092904305162470688572885106499028985955969884595566920711072473939890666858346085472231221166702887775410253
e = 3

n1 = n
PRxy.<x,y> = PolynomialRing(Zmod(n1))
PRx.<xn> = PolynomialRing(Zmod(n1))
PRZZ.<xz,yz> = PolynomialRing(Zmod(n1))

g1 = x**e - C1
g2 = (x + y)**e - C2

q1 = g1.change_ring(PRZZ)
q2 = g2.change_ring(PRZZ)

h = q2.resultant(q1)

# Need to switch to univariate polynomial ring because .small_roots is implemented only for univariate
h = h.univariate_polynomial() # x is hopefully eliminated
h = h.change_ring(PRx).subs(y=xn)
h = h.monic()

# Use LLL to find small roots
roots = h.small_roots(X=2**96, beta=0.1)
assert roots, "Failed to find small roots"

diff = roots[0]
if diff > 2**32:
    diff = -diff
    C1, C2 = C2, C1

print("Found difference:", diff)

x = PRx.gen() # otherwise write xn
g1 = x**e - C1
g2 = (x + diff)**e - C2

# gcd
while g2:
    g1, g2 = g2, g1 % g2

g = g1.monic()
assert g.degree() == 1, "Failed to reduce to a linear polynomial"

# g = xn - msg
msg = -g[0]
# convert to str
h = msg

print("Decrypted message:", l2b(h))
