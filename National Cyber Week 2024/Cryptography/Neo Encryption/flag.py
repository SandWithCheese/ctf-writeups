from sympy import Symbol, solve
from Crypto.Util.number import long_to_bytes


def find_invpow(x, n):
    """Finds the integer component of the n'th root of x,
    an integer such that y ** n <= x < (y + 1) ** n.
    """
    high = 1
    while high**n < x:
        high *= 2
    low = high // 2
    while low < high:
        mid = (low + high) // 2
        if low < mid and mid**n < x:
            low = mid
        elif high > mid and mid**n > x:
            high = mid
        else:
            return mid
    return mid + 1


C = [
    [
        61477142595086554260598781641277851861665498746464319990047365986949051126110669337741590319727707920983674016666349880308271582619811783807036304052811464788003792657482384618357518869152316588703755809792190443075820354148324422863279249236898155862291453509557372481646245626468210324055799552464191861840831434259284817627118748256337509822105879085260663281456870276458812242708871109140095,
        1594717977481935587399611680972752564034678406139716173828884937155737409431616180592298002415498522800715503819129990864514952183695951149025168646408575014792502630364132297333219632418313898300089006325573738007650860951299975903952183277357285459877196791783724653937090206312058104012320004903541151530146582016736979404917813104657356335924792079794473579204911893012729619867365899695523350922979165905107108222113303100820568326683389337318541175121152610,
    ],
    [
        1535418051185037299956232920337647389826858684757060933374997985206820492602957734495615561254924031605240259347793370169353186986463614281382030820238486711194191388964948161376261895766161942640217411666885445370118834723592828067145299211232175702521040515285465826500228711576635074051512512010127166459059620639344224359660464514881681291426319659510588291522069648822671723733922598295611463110578033289912870009404185825256972414819906012606083667325392910,
        61477142595086554260598781641277851861665498746464319990047365986949051126110669337741994670334142917404424609197344158485508527699762213736264417136481408987717938564207567080156480476840490483252212471150320233194217648017850552649148840204388405612439871568474747296049612682911325135297662046183068532358306448999681603053425941306267350602436406600046049503123449388808802868027154055694805,
    ],
]
e = 3
n = 134783535478332140250197510331426059078981693316809976409371027889981399904715302241727487266320535896057964849485553786043263372799097887160955204781967868705205912449806723489461508854842643055073251321523861036333213111812251380797018657666388964374650671676747790873347393446438341968367162804106722475399

det = C[0][0] * C[1][1] - C[0][1] * C[1][0]
cube_root = -find_invpow(abs(det), 3)

trace = C[0][0] + C[1][1]

t = Symbol("t")

expression = t**3 - 3 * cube_root * t - trace
t0 = solve(expression)[0]


m = (C[0][0] + t0 * cube_root) // (pow(t0, 2) - cube_root)

while True:
    flag = long_to_bytes(m)
    if b"NCW" in flag and flag.endswith(b"}"):
        print(flag)
        break
    m -= 1
